{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jpces/OneDrive/Documents/PERSONAL%20PROYECTS/React/BookTrackerApp/frontend/src/app/context/ReadingListsContext.tsx"],"sourcesContent":["'use client';\r\nimport { createContext, useContext, useState, ReactNode, useEffect } from 'react';\r\nimport { ListCategory, ListInfo } from '../../types';\r\n\r\ninterface ReadingListsContextProps {\r\n  selectedBook: string;\r\n  readingList: string[];\r\n  alreadyReadList: string[];\r\n  wantToReadList: string[];\r\n  activeCategory: ListCategory;\r\n  setActiveCategory: (category: ListCategory) => void;\r\n  setReadingList: React.Dispatch<React.SetStateAction<string[]>>;\r\n  setAlreadyReadList: React.Dispatch<React.SetStateAction<string[]>>;\r\n  setWantToReadList: React.Dispatch<React.SetStateAction<string[]>>;\r\n  setSelectedBook: (isbn: string) => void;\r\n  addToList: (list: string[], setList: React.Dispatch<React.SetStateAction<string[]>>, listName: string) => void;\r\n  deleteFromList: (list: string[], setList: React.Dispatch<React.SetStateAction<string[]>>, listName: string) => void;\r\n  moveToList: (targetList: ListCategory) => void;\r\n}\r\n\r\nconst ReadingListsContext = createContext<ReadingListsContextProps | undefined>(undefined);\r\n\r\nexport const ReadingListsProvider = ({ children }: { children: ReactNode }) => {\r\n  const [activeCategory, setActiveCategory] = useState<ListCategory>('reading');\r\n  const [selectedBook, setSelectedBook] = useState('');\r\n\r\n  const saveToLocalStorage = (list: string[], listName: string) => {\r\n    window.localStorage.setItem(listName, JSON.stringify(list));\r\n  };\r\n\r\n  const loadFromLocalStorage = (listName: string) => {\r\n    const list = window.localStorage.getItem(listName);\r\n    return list ? JSON.parse(list) : [];\r\n  };\r\n\r\n  const [readingList, setReadingList] = useState<string[]>([]);\r\n  const [alreadyReadList, setAlreadyReadList] = useState<string[]>([]);\r\n  const [wantToReadList, setWantToReadList] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    setReadingList(loadFromLocalStorage('reading'));\r\n    setAlreadyReadList(loadFromLocalStorage('alreadyRead'));\r\n    setWantToReadList(loadFromLocalStorage('wantToRead'));\r\n  }, []);\r\n\r\n  const getListInfo = (category: ListCategory): ListInfo | null => {\r\n    switch (category) {\r\n      case 'reading':\r\n        return { list: readingList, setList: setReadingList, name: 'reading' };\r\n      case 'alreadyRead':\r\n        return { list: alreadyReadList, setList: setAlreadyReadList, name: 'alreadyRead' };\r\n      case 'wantToRead':\r\n        return { list: wantToReadList, setList: setWantToReadList, name: 'wantToRead' };\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const addToList = (\r\n    list: string[],\r\n    setList: React.Dispatch<React.SetStateAction<string[]>>,\r\n    listName: string\r\n  ) => {\r\n    if (!list.includes(selectedBook)) {\r\n      const updatedList = [...list, selectedBook];\r\n      setList(updatedList);\r\n      saveToLocalStorage(updatedList, listName);\r\n      setSelectedBook('');\r\n    }\r\n  };\r\n\r\n  const deleteFromList = (\r\n    list: string[],\r\n    setList: React.Dispatch<React.SetStateAction<string[]>>,\r\n    listName: string\r\n  ) => {\r\n    if (list.includes(selectedBook)) {\r\n      const updatedList = list.filter((isbn) => isbn !== selectedBook);\r\n      setList(updatedList);\r\n      saveToLocalStorage(updatedList, listName);\r\n      setSelectedBook('');\r\n    }\r\n  };\r\n\r\n  const moveToList = (targetList: ListCategory) => {\r\n    if (!selectedBook) return;\r\n\r\n    const currentListInfo = getListInfo(activeCategory);\r\n    const targetListInfo = getListInfo(targetList);\r\n    if (!currentListInfo || !targetListInfo) return;\r\n\r\n    const updatedCurrentList = currentListInfo.list.filter((isbn) => isbn !== selectedBook);\r\n    currentListInfo.setList(updatedCurrentList);\r\n    saveToLocalStorage(updatedCurrentList, currentListInfo.name);\r\n\r\n    if (!targetListInfo.list.includes(selectedBook)) {\r\n      const updatedTargetList = [...targetListInfo.list, selectedBook];\r\n      targetListInfo.setList(updatedTargetList);\r\n      saveToLocalStorage(updatedTargetList, targetListInfo.name);\r\n    }\r\n\r\n    setSelectedBook('');\r\n  };\r\n\r\n  return (\r\n    <ReadingListsContext.Provider\r\n      value={{\r\n        selectedBook,\r\n        readingList,\r\n        alreadyReadList,\r\n        wantToReadList,\r\n        activeCategory,\r\n        setActiveCategory,\r\n        setReadingList,\r\n        setAlreadyReadList,\r\n        setWantToReadList,\r\n        setSelectedBook,\r\n        addToList,\r\n        deleteFromList,\r\n        moveToList,\r\n      }}\r\n    >\r\n      {children}\r\n    </ReadingListsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useReadingLists = () => {\r\n  const context = useContext(ReadingListsContext);\r\n  if (!context) {\r\n    throw new Error('useReadingLists must be used within a ReadingListsProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}}]
}