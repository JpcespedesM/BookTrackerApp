{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jpces/OneDrive/Documents/PERSONAL%20PROYECTS/React/BookTrackerApp/frontend/src/app/hooks/useReadingLists.ts"],"sourcesContent":["import { useState } from 'react';\r\nimport { ListCategory, ListInfo } from '../../types';\r\n\r\nexport function useReadingLists() {\r\n  const [activeCategory, setActiveCategory] = useState<ListCategory>('reading');\r\n  const [selectedBook, setSelectedBook] = useState('');\r\n\r\n  const saveToLocalStorage = (list: string[], listName: string) => {\r\n    window.localStorage.setItem(listName, JSON.stringify(list));\r\n  };\r\n\r\n  const loadFromLocalStorage = (listName: string) => {\r\n    const list = window.localStorage.getItem(listName);\r\n    return list ? JSON.parse(list) : [];\r\n  };\r\n\r\n  const [readingList, setReadingList] = useState<string[]>(loadFromLocalStorage('reading'));\r\n  const [alreadyReadList, setAlreadyReadList] = useState<string[]>(loadFromLocalStorage('alreadyRead'));\r\n  const [wantToReadList, setWantToReadList] = useState<string[]>(loadFromLocalStorage('wantToRead'));\r\n\r\n  const getListInfo = (category: ListCategory): ListInfo | null => {\r\n    switch (category) {\r\n      case 'reading':\r\n        return {\r\n          list: readingList,\r\n          setList: setReadingList,\r\n          name: 'reading'\r\n        };\r\n      case 'alreadyRead':\r\n        return {\r\n          list: alreadyReadList,\r\n          setList: setAlreadyReadList,\r\n          name: 'alreadyRead'\r\n        };\r\n      case 'wantToRead':\r\n        return {\r\n          list: wantToReadList,\r\n          setList: setWantToReadList,\r\n          name: 'wantToRead'\r\n        };\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const addToList = (list: string[], setList: React.Dispatch<React.SetStateAction<string[]>>, listName: string) => {\r\n    if (!list.includes(selectedBook)) {\r\n      setList([...list, selectedBook]);\r\n      saveToLocalStorage([...list, selectedBook], listName);\r\n      setSelectedBook('');\r\n    }\r\n  };\r\n\r\n  const deleteFromList = (list: string[], setList: React.Dispatch<React.SetStateAction<string[]>>, listName: string) => {\r\n    if (list.includes(selectedBook)) {\r\n      const updatedList = list.filter((isbn) => isbn !== selectedBook);\r\n      setList(updatedList);\r\n      saveToLocalStorage(updatedList, listName);\r\n      setSelectedBook('');\r\n    }\r\n  };\r\n\r\n  const moveToList = (targetList: ListCategory) => {\r\n    if (!selectedBook) return;\r\n\r\n    const currentListInfo = getListInfo(activeCategory);\r\n    if (!currentListInfo) return;\r\n\r\n    const targetListInfo = getListInfo(targetList);\r\n    if (!targetListInfo) return;\r\n\r\n    const updatedCurrentList = currentListInfo.list.filter(isbn => isbn !== selectedBook);\r\n    currentListInfo.setList(updatedCurrentList);\r\n    saveToLocalStorage(updatedCurrentList, currentListInfo.name);\r\n\r\n    if (!targetListInfo.list.includes(selectedBook)) {\r\n      targetListInfo.setList([...targetListInfo.list, selectedBook]);\r\n      saveToLocalStorage([...targetListInfo.list, selectedBook], targetListInfo.name);\r\n    }\r\n\r\n    setSelectedBook('');\r\n  };\r\n\r\n  return {\r\n    selectedBook,\r\n    readingList,\r\n    alreadyReadList,\r\n    wantToReadList,\r\n    activeCategory,\r\n    setActiveCategory,\r\n    setReadingList,\r\n    setAlreadyReadList,\r\n    setWantToReadList,\r\n    setSelectedBook,\r\n    addToList,\r\n    deleteFromList,\r\n    moveToList,\r\n    loadFromLocalStorage,\r\n  };\r\n} "],"names":[],"mappings":";;;AAAA;;;AAGO,SAAS;;IACd,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB;IACnE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,qBAAqB,CAAC,MAAgB;QAC1C,OAAO,YAAY,CAAC,OAAO,CAAC,UAAU,KAAK,SAAS,CAAC;IACvD;IAEA,MAAM,uBAAuB,CAAC;QAC5B,MAAM,OAAO,OAAO,YAAY,CAAC,OAAO,CAAC;QACzC,OAAO,OAAO,KAAK,KAAK,CAAC,QAAQ,EAAE;IACrC;IAEA,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,qBAAqB;IAC9E,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,qBAAqB;IACtF,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,qBAAqB;IAEpF,MAAM,cAAc,CAAC;QACnB,OAAQ;YACN,KAAK;gBACH,OAAO;oBACL,MAAM;oBACN,SAAS;oBACT,MAAM;gBACR;YACF,KAAK;gBACH,OAAO;oBACL,MAAM;oBACN,SAAS;oBACT,MAAM;gBACR;YACF,KAAK;gBACH,OAAO;oBACL,MAAM;oBACN,SAAS;oBACT,MAAM;gBACR;YACF;gBACE,OAAO;QACX;IACF;IAEA,MAAM,YAAY,CAAC,MAAgB,SAAyD;QAC1F,IAAI,CAAC,KAAK,QAAQ,CAAC,eAAe;YAChC,QAAQ;mBAAI;gBAAM;aAAa;YAC/B,mBAAmB;mBAAI;gBAAM;aAAa,EAAE;YAC5C,gBAAgB;QAClB;IACF;IAEA,MAAM,iBAAiB,CAAC,MAAgB,SAAyD;QAC/F,IAAI,KAAK,QAAQ,CAAC,eAAe;YAC/B,MAAM,cAAc,KAAK,MAAM,CAAC,CAAC,OAAS,SAAS;YACnD,QAAQ;YACR,mBAAmB,aAAa;YAChC,gBAAgB;QAClB;IACF;IAEA,MAAM,aAAa,CAAC;QAClB,IAAI,CAAC,cAAc;QAEnB,MAAM,kBAAkB,YAAY;QACpC,IAAI,CAAC,iBAAiB;QAEtB,MAAM,iBAAiB,YAAY;QACnC,IAAI,CAAC,gBAAgB;QAErB,MAAM,qBAAqB,gBAAgB,IAAI,CAAC,MAAM,CAAC,CAAA,OAAQ,SAAS;QACxE,gBAAgB,OAAO,CAAC;QACxB,mBAAmB,oBAAoB,gBAAgB,IAAI;QAE3D,IAAI,CAAC,eAAe,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC/C,eAAe,OAAO,CAAC;mBAAI,eAAe,IAAI;gBAAE;aAAa;YAC7D,mBAAmB;mBAAI,eAAe,IAAI;gBAAE;aAAa,EAAE,eAAe,IAAI;QAChF;QAEA,gBAAgB;IAClB;IAEA,OAAO;QACL;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;AACF;GAhGgB","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jpces/OneDrive/Documents/PERSONAL%20PROYECTS/React/BookTrackerApp/frontend/src/app/Components/lists/list.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React from 'react';\r\nimport books from '../books/books.json';\r\n\r\ninterface Props {\r\n  list: string[];\r\n  setSelectedBook: (isbn: string) => void;\r\n  setActiveCategory: (category: 'reading' | 'alreadyRead' | 'wantToRead') => void;\r\n  listName: string;\r\n}\r\n\r\nexport default function List({ list, setSelectedBook, setActiveCategory, listName }: Props) {\r\n  const getBookDetails = (isbn: string) => books.find((book) => book.isbn === isbn);\r\n\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <h3 className=\"text-xl font-semibold mb-2\">{listName}</h3>\r\n      {list.length > 0 ? (\r\n        list.map((isbn) => {\r\n          const book = getBookDetails(isbn);\r\n          return (\r\n            <button\r\n              type=\"button\"\r\n              key={isbn}\r\n              className=\"border p-4 mb-4 rounded shadow hover:bg-gray-100 w-full flex flex-col items-start\"\r\n              onClick={() => {\r\n                if (book) {\r\n                  setSelectedBook(book.isbn);\r\n                  setActiveCategory(listName === \"ðŸ“– Reading Now\" ? 'reading' : \r\n                                  listName === \"ðŸ“š Already Read\" ? 'alreadyRead' : \r\n                                  'wantToRead');\r\n                }\r\n              }}\r\n            >\r\n              {book ? (\r\n                <>\r\n                  <h3 className=\"text-xl font-bold\">{book.title}</h3>\r\n                  <p className=\"text-gray-700\">Author: {book.author}</p>\r\n                  <p className=\"text-gray-700\">ISBN: {book.isbn}</p>\r\n                </>\r\n              ) : (\r\n                <p className=\"text-gray-500\">Book details not available.</p>\r\n              )}\r\n            </button>\r\n          );\r\n        })\r\n      ) : (\r\n        <p className=\"text-gray-500\">No books in this list.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AAHA;;;AAYe,SAAS,KAAK,EAAE,IAAI,EAAE,eAAe,EAAE,iBAAiB,EAAE,QAAQ,EAAS;IACxF,MAAM,iBAAiB,CAAC,OAAiB,8HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC,OAAS,KAAK,IAAI,KAAK;IAE5E,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAG,WAAU;0BAA8B;;;;;;YAC3C,KAAK,MAAM,GAAG,IACb,KAAK,GAAG,CAAC,CAAC;gBACR,MAAM,OAAO,eAAe;gBAC5B,qBACE,6LAAC;oBACC,MAAK;oBAEL,WAAU;oBACV,SAAS;wBACP,IAAI,MAAM;4BACR,gBAAgB,KAAK,IAAI;4BACzB,kBAAkB,aAAa,mBAAmB,YAClC,aAAa,oBAAoB,gBACjC;wBAClB;oBACF;8BAEC,qBACC;;0CACE,6LAAC;gCAAG,WAAU;0CAAqB,KAAK,KAAK;;;;;;0CAC7C,6LAAC;gCAAE,WAAU;;oCAAgB;oCAAS,KAAK,MAAM;;;;;;;0CACjD,6LAAC;gCAAE,WAAU;;oCAAgB;oCAAO,KAAK,IAAI;;;;;;;;qDAG/C,6LAAC;wBAAE,WAAU;kCAAgB;;;;;;mBAlB1B;;;;;YAsBX,mBAEA,6LAAC;gBAAE,WAAU;0BAAgB;;;;;;;;;;;;AAIrC;KAxCwB","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jpces/OneDrive/Documents/PERSONAL%20PROYECTS/React/BookTrackerApp/frontend/src/app/Components/profile/showProfile.tsx"],"sourcesContent":["/**\r\n * ProfileInformation Component\r\n * \r\n * Displays a user's reading lists and book details, allowing interaction with books\r\n * across different reading status categories.\r\n * \r\n * @component\r\n * @returns {JSX.Element} A profile view showing reading lists and book details\r\n * \r\n * States (from useBooks hook):\r\n * - readingList: Array of ISBNs for books currently being read\r\n * - alreadyReadList: Array of ISBNs for completed books\r\n * - wantToReadList: Array of ISBNs for future reading\r\n * - setSelectedBook: Function to set currently selected book\r\n * \r\n * Helper Functions:\r\n * - getBookDetails: Retrieves full book details from ISBN\r\n * \r\n * Sections:\r\n * - Reading Now: Shows books currently being read\r\n * - Already Read: Shows completed books (not shown in truncated view)\r\n * - Want to Read: Shows books planned for future (not shown in truncated view)\r\n * \r\n * Features:\r\n * - Clickable book entries to select books\r\n * - Book details including title, author and ISBN\r\n * - Empty state handling for lists with no books\r\n */\r\n\r\n\r\n'use client';\r\n\r\nimport React, { useState } from 'react';\r\nimport { useReadingLists } from '../../hooks/useReadingLists';\r\nimport List from '../lists/list';\r\n\r\nexport default function ProfileInformation() {\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const {\r\n    readingList,\r\n    alreadyReadList,\r\n    wantToReadList,\r\n    selectedBook,\r\n    activeCategory,\r\n    setReadingList,\r\n    setAlreadyReadList,\r\n    setWantToReadList,\r\n    deleteFromList,\r\n    setSelectedBook,\r\n    setActiveCategory,\r\n    moveToList\r\n  } = useReadingLists();\r\n  \r\n  const handleDelete = () => {\r\n    let list: string[] = [];\r\n    let setList: React.Dispatch<React.SetStateAction<string[]>> = () => {};\r\n    let listName = '';\r\n  \r\n    switch (activeCategory) {\r\n      case 'reading':\r\n        list = readingList;\r\n        setList = setReadingList;\r\n        listName = 'reading';\r\n        break;\r\n      case 'alreadyRead':\r\n        list = alreadyReadList;\r\n        setList = setAlreadyReadList;\r\n        listName = 'alreadyRead';\r\n        break;\r\n      case 'wantToRead':\r\n        list = wantToReadList;\r\n        setList = setWantToReadList;\r\n        listName = 'wantToRead';\r\n        break;\r\n    }\r\n  \r\n    deleteFromList(list, setList, listName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-7xl mx-auto mt-10 p-4\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div className=\"border rounded shadow-lg p-4\">\r\n          <List list={readingList} setSelectedBook={setSelectedBook} setActiveCategory={setActiveCategory} listName=\"ðŸ“– Reading Now\" />\r\n        </div>\r\n        <div className=\"border rounded shadow-lg p-4\">\r\n          <List list={alreadyReadList} setSelectedBook={setSelectedBook} setActiveCategory={setActiveCategory} listName=\"ðŸ“š Already Read\" />\r\n        </div>\r\n        <div className=\"border rounded shadow-lg p-4\">\r\n          <List list={wantToReadList} setSelectedBook={setSelectedBook} setActiveCategory={setActiveCategory} listName=\"ðŸ“– Want to Read\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 mt-4 justify-center\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n          onClick={handleDelete}\r\n          disabled={!selectedBook}\r\n        >\r\n          Delete from list\r\n        </button>\r\n\r\n        <div className=\"relative\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-gray-400\"\r\n            onClick={() => setIsDropdownOpen(!isDropdownOpen)}\r\n            disabled={!selectedBook}\r\n          >\r\n            Move to list\r\n          </button>\r\n          \r\n          {isDropdownOpen && (\r\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border\">\r\n              <div className=\"py-1\">\r\n                {activeCategory !== 'reading' && (\r\n                  <button\r\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                    onClick={() => {\r\n                      moveToList('reading');\r\n                      setIsDropdownOpen(false);\r\n                    }}\r\n                  >\r\n                    ðŸ“– Reading Now\r\n                  </button>\r\n                )}\r\n                {activeCategory !== 'alreadyRead' && (\r\n                  <button\r\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                    onClick={() => {\r\n                      moveToList('alreadyRead');\r\n                      setIsDropdownOpen(false);\r\n                    }}\r\n                  >\r\n                    ðŸ“š Already Read\r\n                  </button>\r\n                )}\r\n                {activeCategory !== 'wantToRead' && (\r\n                  <button\r\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                    onClick={() => {\r\n                      moveToList('wantToRead');\r\n                      setIsDropdownOpen(false);\r\n                    }}\r\n                  >\r\n                    ðŸ“– Want to Read\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BC;;;;AAKD;AACA;AACA;;;AAJA;;;;AAMe,SAAS;;IACtB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACrD,MAAM,EACJ,WAAW,EACX,eAAe,EACf,cAAc,EACd,YAAY,EACZ,cAAc,EACd,cAAc,EACd,kBAAkB,EAClB,iBAAiB,EACjB,cAAc,EACd,eAAe,EACf,iBAAiB,EACjB,UAAU,EACX,GAAG,CAAA,GAAA,qJAAA,CAAA,kBAAe,AAAD;IAElB,MAAM,eAAe;QACnB,IAAI,OAAiB,EAAE;QACvB,IAAI,UAA0D,KAAO;QACrE,IAAI,WAAW;QAEf,OAAQ;YACN,KAAK;gBACH,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX;YACF,KAAK;gBACH,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX;YACF,KAAK;gBACH,OAAO;gBACP,UAAU;gBACV,WAAW;gBACX;QACJ;QAEA,eAAe,MAAM,SAAS;IAChC;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,yJAAA,CAAA,UAAI;4BAAC,MAAM;4BAAa,iBAAiB;4BAAiB,mBAAmB;4BAAmB,UAAS;;;;;;;;;;;kCAE5G,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,yJAAA,CAAA,UAAI;4BAAC,MAAM;4BAAiB,iBAAiB;4BAAiB,mBAAmB;4BAAmB,UAAS;;;;;;;;;;;kCAEhH,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,yJAAA,CAAA,UAAI;4BAAC,MAAM;4BAAgB,iBAAiB;4BAAiB,mBAAmB;4BAAmB,UAAS;;;;;;;;;;;;;;;;;0BAIjH,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBACC,MAAK;wBACL,WAAU;wBACV,SAAS;wBACT,UAAU,CAAC;kCACZ;;;;;;kCAID,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,MAAK;gCACL,WAAU;gCACV,SAAS,IAAM,kBAAkB,CAAC;gCAClC,UAAU,CAAC;0CACZ;;;;;;4BAIA,gCACC,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAI,WAAU;;wCACZ,mBAAmB,2BAClB,6LAAC;4CACC,WAAU;4CACV,SAAS;gDACP,WAAW;gDACX,kBAAkB;4CACpB;sDACD;;;;;;wCAIF,mBAAmB,+BAClB,6LAAC;4CACC,WAAU;4CACV,SAAS;gDACP,WAAW;gDACX,kBAAkB;4CACpB;sDACD;;;;;;wCAIF,mBAAmB,8BAClB,6LAAC;4CACC,WAAU;4CACV,SAAS;gDACP,WAAW;gDACX,kBAAkB;4CACpB;sDACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWnB;GAxHwB;;QAelB,qJAAA,CAAA,kBAAe;;;KAfG","debugId":null}}]
}